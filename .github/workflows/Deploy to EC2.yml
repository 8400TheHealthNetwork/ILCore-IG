name: Deploy to Amazon ECS Production - EC2
    
on:
  workflow_dispatch:

env:
  AWS_REGION: il-central-1

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

#    - name: free disk space
#      run: |
#        sudo swapoff -a
#        sudo rm -f /swapfile
#        sudo apt clean
#        docker rmi $(docker image ls -aq)
#        df -h

    - name: Launch new EC2 instance from template
      id: launch_ec2
      run: |
        INSTANCE_ID=$(aws ec2 run-instances --launch-template LaunchTemplateName=IGPublisher \
                    --tag-specifications 'ResourceType=instance,Tags=[{Key=proj,Value=IGPublisher-Prod},{Key=Name,Value=NewInstance}]' \
                    --query 'Instances[0].InstanceId' --output text)
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

    - name: Wait for new EC2 instance to be running
      run: |
        aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}

#    - name: Wait for SSM agent to be ready
#      run: |
#        aws ssm wait instance-information --filters "Key=InstanceIds,Values=${{ env.INSTANCE_ID }}"

    - name: Get new EC2 instance private DNS
      run: |
        PRIVATE_DNS=$(aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} --query 'Reservations[0].Instances[0].PrivateDnsName' --output text)
        echo "PRIVATE_DNS=$PRIVATE_DNS" >> $GITHUB_ENV

    - name: clone repos ig-history & ig-registry
      run: |
        git clone https://github.com/HL7/fhir-ig-history-template.git ig-history
        git clone https://github.com/FHIR/ig-registry.git ig-registry
        
    - name: Install jekyll & jre
      run: |
        sudo rm /etc/apt/sources.list.d/microsoft-prod.list && \
        sudo apt-get update && \
        sudo apt-get install -y curl gnupg ruby-full build-essential && \
        sudo gem install jekyll bundler && \
        sudo apt install default-jre -y

    - name: Install sushi
      run: |
        sudo apt-get install npm -y && \
        sudo apt-get install -y nodejs && \
        sudo npm install -g fsh-sushi -y
        
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # download publisher
        mkdir ./ILCore/input-cache/ && \
        curl -L https://github.com/HL7/fhir-ig-publisher/releases/latest/download/publisher.jar -o "./ILCore/input-cache/publisher.jar"
        
        # run genonce.sh
        chmod +x ./ILCore/_genonce.sh && \
        cd ILCore && \
        ./_genonce.sh

    - name: Publish Version
      run: |
        java -jar ./ILCore/input-cache/publisher.jar -go-publish -no-sushi -source ./ILCore -web ./webroot -registry ./ig-registry/fhir-ig-list.json -history ./ig-history -templates ./webroot/templates

    - name: Deploy application to new EC2 instance using SSH
      uses: easingthemes/ssh-deploy@v2.1.5
      env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ec2-user
          SSH_HOST: ${{ env.PRIVATE_DNS }}
          TARGET: /var/www/html
          SOURCE: ./webroot/core
